@use '../../../scss/global/var' as v;
@use '../../../scss/global/mixin' as m;

.carousel-nav {
    position: absolute;
    left: 0;
    top: 0;
    right: 0;
    bottom: 0;

    --nav-size: 4rem;

    &__hidden {
        // Necessary for preventing 'pointercancel' event from being fired when
        // browser default actions like scroll or zoom is triggered, otherwise
        // will have to setup event listeners for both mouseevent and touchevent
        // https://developers.google.com/web/updates/2016/10/pointer-events
        touch-action: none;
        position: absolute;
        background-color: transparent;
        opacity: 0;
        left: 0;
        top: 0;
        right: var(--nav-size);
        bottom: 0;

        @include m.portrait-prism {
            right: 0;
            bottom: var(--nav-size);
        }
    }

    &__sidebar {
        --btn-size: calc(var(--nav-size) * 0.4);

        position: absolute;
        background-color: v.$color-black;
        opacity: 0.8;
        top: 0;
        right: 0;
        width: var(--nav-size);
        height: 100%;
        padding: var(--btn-size) calc((var(--nav-size) - var(--btn-size)) / 2);
        display: flex;
        flex-direction: column;
        flex-wrap: nowrap;

        @include m.portrait-prism {
            left: 0;
            top: unset;
            bottom: 0;
            width: 100%;
            height: var(--nav-size);
            padding: calc((var(--nav-size) - var(--btn-size)) / 2)
                var(--btn-size);
            flex-direction: row;
        }

        &__progress {
            position: absolute;
            width: 100%;
            height: calc(var(--progress) * 100%);
            left: 0;
            bottom: 0;
            background-color: v.$color-base;
            opacity: 0.5;

            @include m.portrait-prism {
                height: 100%;
                width: calc(var(--progress) * 100%);
            }
        }

        &__btn {
            flex: 0 0 calc(var(--btn-size) * 1.5);
            position: relative;

            & .btn {
                position: absolute;
                cursor: pointer;
                width: var(--btn-size);
                height: var(--btn-size);

                &::before {
                    content: '';
                    display: block;
                    position: absolute;
                    width: 70%;
                    height: 70%;
                    border-left: 1px solid v.$color-base;
                    border-top: 1px solid v.$color-base;
                    transform-origin: left top;
                    left: 50%;
                    top: 15%;
                    transform: rotate(45deg);
                }

                &.prev {
                    top: 0;

                    @include m.portrait-prism {
                        top: unset;
                        left: 0;
                        transform: rotate(-90deg);
                    }
                }

                &.next {
                    bottom: 0;
                    transform: rotate(180deg);

                    @include m.portrait-prism {
                        bottom: unset;
                        right: 0;
                        transform: rotate(90deg);
                    }
                }

                &:hover {
                    &::before {
                        border-left-width: 3px;
                        border-top-width: 3px;
                    }
                }
            }
        }

        &__switch {
            flex: 0 0 calc(var(--btn-size) * 1.5);
            position: relative;

            & .switch {
                --switch-size: calc(var(--btn-size) * 0.85);

                position: absolute;
                cursor: pointer;
                width: var(--switch-size);
                height: var(--switch-size);
                left: calc((var(--btn-size) - var(--switch-size)) / 2);
                bottom: 0;

                @include m.portrait-prism {
                    left: unset;
                    top: calc((var(--btn-size) - var(--switch-size)) / 2);
                    bottom: unset;
                    right: 0;
                }

                &::before {
                    content: '';
                    display: block;
                    position: absolute;
                    left: 50%;
                    transform: translateX(-50%);
                }

                &.manual {
                    &::before {
                        width: 0;
                        height: 0;
                        border-top: calc(var(--switch-size) / 2) solid
                            transparent;
                        border-bottom: calc(var(--switch-size) / 2) solid
                            transparent;
                        border-right: calc(var(--switch-size) / 2 * 1.732) solid
                            v.$color-base;
                        transform: translateX(-38%) rotate(-180deg);
                        transition: transform v.$tran-dur-fast;
                    }
                }

                &.auto {
                    &::before {
                        width: calc(var(--switch-size) / 5);
                        height: var(--switch-size);
                        border-left: calc(var(--switch-size) / 5) solid
                            v.$color-base;
                        border-right: calc(var(--switch-size) / 5) solid
                            v.$color-base;
                        transition: transform v.$tran-dur-fast;
                    }
                }

                & .progress-ring {
                    --ring-size: calc(var(--switch-size) * 1.8);

                    width: var(--ring-size);
                    height: var(--ring-size);
                    position: absolute;
                    left: 50%;
                    top: 50%;
                    transform: translateX(-50%) translateY(-50%) rotate(-90deg);

                    &__circle {
                        --strok-thickness: 1px;
                        --ring-radius: calc(
                            var(--ring-size) / 2 - var(--strok-thickness)
                        );
                        --ring-length: calc(2 * 3.14 * var(--ring-radius));

                        stroke: v.$color-base;
                        stroke-width: 1px;
                        fill: transparent;
                        r: var(--ring-radius);
                        cx: calc(var(--ring-size) / 2);
                        cy: calc(var(--ring-size) / 2);
                        // make dasharray[1] (the gap) long enough to cover full circumference
                        stroke-dasharray: calc(
                                var(--ring-length) * var(--ring-progress)
                            )
                            calc(var(--ring-length) * 1.5);
                    }
                }
            }
        }

        &__dot {
            flex: 1;
            position: relative;
            width: 100%;
            height: 100%;

            &::before {
                content: '';
                display: block;
                position: absolute;
                left: 50%;
                top: 50%;
                transform: translateX(-50%) translateY(-50%);
                width: 1px;
                height: 80%;
                max-height: 3rem;
                background-color: v.$color-dark;

                @include m.portrait-prism {
                    width: 60%;
                    max-width: 3rem;
                    height: 1px;
                }
            }
            &--current::before {
                width: 2px;
                background-color: v.$color-base;

                @include m.portrait-prism {
                    width: 60%;
                    max-width: 3rem;
                    height: 2px;
                }
            }
        }
    }
}
