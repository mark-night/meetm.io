@use '../../../scss/global/var' as v;
@use '../../../scss/global/mixin' as m;

.carousel__projs {
    $prism-push-out-bleed: 10vmin;
    --prism-height: calc(var(--prism-width) / var(--prism-ratio));
    --prism-depth: calc(
        var(--prism-height) / 2 / 1.732 + #{$prism-push-out-bleed / 1.732 * 2}
    );

    @include m.portrait-prism {
        --prism-depth: calc(
            var(--prism-width) / 2 / 1.732 + #{$prism-push-out-bleed / 1.732 * 2}
        );

        perspective: calc(var(--prism-width) / 2 * 1.732 + 30rem);
        margin: 5vh $prism-push-out-bleed;
    }

    padding-top: var(--prism-height);
    perspective: calc(var(--prism-height) / 2 * 1.732 + 30rem);
    position: relative;
    margin: $prism-push-out-bleed 5vw;

    &::before {
        // shadow
        content: '';
        z-index: -1;
        position: absolute;
        left: 50%;
        top: 50%;
        transform: translateX(-50%) translateY(-50%)
            translateZ(calc(-2 * var(--prism-depth)));
        width: 80%;
        height: 1rem;
        border-radius: 50%;
        background-color: v.$color-white;
        pointer-events: none;
        --shadow-shift: calc(var(--prism-height) * 1.1);
        box-shadow: 0 var(--shadow-shift) 1rem rgba(0, 0, 0, 0.1),
            5rem var(--shadow-shift) 2rem rgba(0, 0, 0, 0.2),
            -5rem var(--shadow-shift) 2rem rgba(0, 0, 0, 0.2),
            10rem var(--shadow-shift) 3rem rgba(0, 0, 0, 0.3),
            -10rem var(--shadow-shift) 3rem rgba(0, 0, 0, 0.3);

        @include m.portrait-prism {
            --shadow-shift: calc(var(--prism-height) * 0.85);
            box-shadow: 0 var(--shadow-shift) 1rem rgba(0, 0, 0, 0.1),
                4rem var(--shadow-shift) 2rem rgba(0, 0, 0, 0.2),
                -4rem var(--shadow-shift) 2rem rgba(0, 0, 0, 0.2),
                8rem var(--shadow-shift) 3rem rgba(0, 0, 0, 0.3),
                -8rem var(--shadow-shift) 3rem rgba(0, 0, 0, 0.3);
        }
    }

    &::after {
        // page height holder
        content: '';
        position: absolute;
        bottom: calc(-0.25 * var(--prism-height) - 5rem);
        height: 1px;
        width: 100%;
        background-color: transparent;

        @include m.portrait-prism {
            bottom: calc(-0.1 * var(--prism-height) - 5rem);
        }
    }

    &__prism {
        position: absolute;
        left: 0;
        top: 0;
        right: 0;
        bottom: 0;
        transform-style: preserve-3d;
        transition: transform v.$tran-dur-slow;
    }

    &__proj {
        $standby-opacity: 0.3;
        $standby-brightness: 0.85;
        $standby-saturation: 0;

        position: absolute;
        width: 100%;
        height: 100%;
        opacity: 1;
        filter: brightness(1) saturate(1);
        transition: opacity v.$tran-dur-slow, filter v.$tran-dur-slow;

        &.ready {
            opacity: $standby-opacity;
            filter: brightness($standby-brightness)
                saturate($standby-saturation);
        }

        &.#{v.$pose-prev} {
            transform: rotateX(120deg) translateZ(calc(var(--prism-depth)));
        }

        &.#{v.$pose-current} {
            transform: rotateX(0deg) translateZ(calc(var(--prism-depth)));
        }

        &.#{v.$pose-next} {
            transform: rotateX(-120deg) translateZ(calc(var(--prism-depth)));
        }

        @include m.portrait-prism {
            &.#{v.$pose-prev} {
                transform: rotateY(-120deg) translateZ(var(--prism-depth));
            }

            &.#{v.$pose-current} {
                transform: rotateY(0deg) translateZ(var(--prism-depth));
            }

            &.#{v.$pose-next} {
                transform: rotateY(120deg) translateZ(var(--prism-depth));
            }
        }

        &.transition {
            &-enter {
                opacity: 0;
                filter: brightness(0) saturate(0);

                &-active {
                    opacity: $standby-opacity;
                    filter: brightness($standby-brightness)
                        saturate($standby-saturation);
                    transition: opacity v.$tran-dur-fast,
                        filter v.$tran-dur-fast;
                }
            }

            &-exit {
                opacity: $standby-opacity;
                filter: brightness($standby-brightness)
                    saturate($standby-saturation);

                &-active {
                    opacity: 0;
                    filter: brightness(0) saturate(0);
                    transition: opacity v.$tran-dur-fast,
                        filter v.$tran-dur-fast;
                }
            }
        }
    }
}
