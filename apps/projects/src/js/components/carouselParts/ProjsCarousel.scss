@use '../../../scss/global/var' as v;
@use '../../../scss/global/mixin' as m;

.carousel__projs {
    --prism-height: calc(var(--prism-width) / var(--prism-ratio));
    --prism-push-out-bleed: 12vh;
    --prism-depth: calc(
        var(--prism-height) / 2 / 1.732 + var(--prism-push-out-bleed) / 1.732 *
            2
    );

    @include m.portrait-prism {
        --prism-push-out-bleed: 10vw;
        --prism-depth: calc(
            var(--prism-width) / 2 / 1.732 + var(--prism-push-out-bleed) / 1.732 *
                2
        );

        perspective: calc(var(--prism-width) / 2 * 1.732 + 30rem);
        margin: 3vh var(--prism-push-out-bleed);
    }

    padding-top: var(--prism-height);
    perspective: calc(var(--prism-height) / 2 * 1.732 + 30rem);
    position: relative;
    margin: var(--prism-push-out-bleed) 5vw;

    &__prism {
        position: absolute;
        left: 0;
        top: 0;
        right: 0;
        bottom: 0;
        transform-style: preserve-3d;
        transition: transform v.$tran-dur-slow;
    }

    &__proj {
        $standby-opacity: 0.3;

        position: absolute;
        width: 100%;
        height: 100%;
        opacity: 1;
        transition: opacity v.$tran-dur-slow;

        &.ready {
            opacity: $standby-opacity;
        }

        &.#{v.$pose-prev} {
            transform: rotateX(120deg) translateZ(calc(var(--prism-depth)));
        }

        &.#{v.$pose-current} {
            transform: rotateX(0deg) translateZ(calc(var(--prism-depth)));
        }

        &.#{v.$pose-next} {
            transform: rotateX(-120deg) translateZ(calc(var(--prism-depth)));
        }

        @include m.portrait-prism {
            &.#{v.$pose-prev} {
                transform: rotateY(-120deg) translateZ(var(--prism-depth));
            }

            &.#{v.$pose-current} {
                transform: rotateY(0deg) translateZ(var(--prism-depth));
            }

            &.#{v.$pose-next} {
                transform: rotateY(120deg) translateZ(var(--prism-depth));
            }
        }

        &.transition {
            &-enter {
                opacity: 0;

                &-active {
                    opacity: $standby-opacity;
                    transition: opacity v.$tran-dur-fast;
                }
            }

            &-exit {
                opacity: $standby-opacity;

                &-active {
                    opacity: 0;
                    transition: opacity v.$tran-dur-fast;
                }
            }
        }
    }
}
